
package com.smartcar.sdk;


import com.google.gson.FieldNamingPolicy;

import com.google.gson.GsonBuilder;
import com.smartcar.sdk.data.ApiData;

import com.smartcar.sdk.data.SmartcarResponse;

import okhttp3.MediaType;

import okhttp3.OkHttpClient;

import okhttp3.Request;

import okhttp3.Response;

import org.joda.time.DateTime;

import java.io.IOException;


abstract class ApiClient {

  public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");
  
  private static final String SDK_VERSION = ApiClient.getSdkVersion();

  private static final String API_VERSION = "v1.0";

  protected static final String URL_API = "https://api.smartcar.com/" + ApiClient.API_VERSION;

  protected static final String USER_AGENT = String.format(

      "Smartcar/%s (%s; %s) Java v%s %s",

      ApiClient.SDK_VERSION,

      System.getProperty("os.name"),

      System.getProperty("os.arch"),

      System.getProperty("java.version"),

      System.getProperty("java.vm.name")

  );
  
   private static OkHttpClient client = new OkHttpClient();

  static GsonBuilder gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);
  
  public static String urlApi = ApiClient.URL_API;
  
   private static String getSdkVersion() {
    String version = ApiClient.class.getPackage().getImplementationVersion();



    if(version == null) {

      version = "DEVELOPMENT";
    }

    return version;
   } 
   
    protected static Response execute(Request request) throws SmartcarException {
       try {
           Response response = ApiClient.client.newCall(request).execute();



      if(!response.isSuccessful()) {

        throw new SmartcarException(request, response);

      }

      else {

        return response;
          }
       }
    catch (IOException ex) {

      throw new SmartcarException(ex.getMessage());

    }
    }
  
  protected static <T extends ApiData> SmartcarResponse<T> execute(Request request, Class<T> dataType) throws SmartcarException {
     Response response = ApiClient.execute(request);
     try {

      body = response.body().string();

    } catch (IOException ex) {

      throw new SmartcarException(ex.getMessage());

    }
    

    T data = ApiClient.gson.create().fromJson(body, dataType);
    String unitHeader = response.header("sc-unit-system");

    String ageHeader = response.header("sc-data-age");
    if(ageHeader != null) {
      DateTime date = DateTime.parse(ageHeader);



      return new SmartcarResponse<T>(data, unitHeader, date.toDate());
    
    }
  }
  }
